[{"/Users/vladikbaryshpolets/Desktop/calculator/src/index.js":"1","/Users/vladikbaryshpolets/Desktop/calculator/src/reportWebVitals.js":"2","/Users/vladikbaryshpolets/Desktop/calculator/src/App.js":"3","/Users/vladikbaryshpolets/Desktop/calculator/src/components/Calculator.jsx":"4","/Users/vladikbaryshpolets/Desktop/calculator/src/components/StyledCalculator.jsx":"5","/Users/vladikbaryshpolets/Desktop/calculator/src/components/util.jsx":"6"},{"size":325,"mtime":1617194223769,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1617193315054,"results":"9","hashOfConfig":"8"},{"size":366,"mtime":1617472376886,"results":"10","hashOfConfig":"8"},{"size":10355,"mtime":1617477597958,"results":"11","hashOfConfig":"8"},{"size":1427,"mtime":1617459012677,"results":"12","hashOfConfig":"8"},{"size":1173,"mtime":1617476649775,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1a5v28",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vladikbaryshpolets/Desktop/calculator/src/index.js",[],["28","29"],"/Users/vladikbaryshpolets/Desktop/calculator/src/reportWebVitals.js",[],"/Users/vladikbaryshpolets/Desktop/calculator/src/App.js",[],"/Users/vladikbaryshpolets/Desktop/calculator/src/components/Calculator.jsx",["30"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Wrapper, AnswerBlock, GetNumbers, Answer, \n    FLexContainer, RowBlock, ExceptionH3 } from \"./StyledCalculator\";\n\nimport { adding, multiply, devide, subtract,\n         isExists, keyMatch, refsToEmptyStr,\n         keyMatchReg } from \"./util\";\n\n\nconst Calculator = () => {\n\n    const calcAct = useRef({\n        currentOperation: \"\",\n        currentNumberBefore: \"\",\n        currentNumberAfter: \"\",\n        prevMemo: \"\",\n    })\n\n    const [numbersDisplay, setNumbersDisplay] = useState(\"\");\n\n    const [ results, setResults] = useState(null);\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n    }, []);\n\n    useEffect(() => {\n        if(results === \"Infinity\" || results === \"NaN\") {\n            alert(\"Never devide any numbers by zero, press OK and never do this\")\n            clear()\n        }\n    }, [results])\n\n   \n    const handleKeyDown = (e) => {\n        let key = e.key;\n        if (key === \"Enter\") {\n            finalResult()\n            return\n        }\n        if(e.shiftKey && key === \"*\") {\n            key = \"*\"\n        }\n        if(e.shiftKey && key === \"%\") {\n            key = \"%\"\n        }\n\n        const reg = new RegExp(/^\\d+(\\.\\d+)?$/);\n        if(keyMatchReg(key, reg)) {\n            setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${key}`))\n            if(calcAct.current.currentOperation === \"\") {\n                calcAct.current.currentNumberBefore = calcAct.current.currentNumberBefore.concat(key);\n            } else if (calcAct.current.currentOperation !== '') {\n                calcAct.current.currentNumberAfter = calcAct.current.currentNumberAfter.concat(key);\n            }\n        }\n\n        if(keyMatch(key)) {\n            if(calcAct.current.currentOperation === \"\") {\n                calcAct.current.currentOperation = key;\n                setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${key}`));\n            } else {\n                const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation)\n                const strRes = res.toString();\n                calcAct.current.currentNumberBefore = strRes;\n                calcAct.current.currentNumberAfter = \"\";\n                setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${key}`));\n                calcAct.current.currentOperation = key;\n            }\n            \n        }\n    };\n\n    const clickOperation = (e) => {\n        setNumbersDisplay((prev) => `${prev}${e.target.innerText}`)\n        if(calcAct.current.currentOperation === '') {\n            calcAct.current.currentOperation = e.target.innerText;\n        } else if (calcAct.current.currentOperation !== '') {\n            const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation)\n            const strRes = res.toString();\n            calcAct.current.currentNumberBefore = strRes;\n            calcAct.current.currentNumberAfter = \"\";\n            calcAct.current.currentOperation = e.target.innerText;\n        }\n    }\n\n    const getItem = (e) => {\n        let getedItem = e.target.innerText\n        if( +getedItem === 0 && (numbersDisplay === \"\" || numbersDisplay === 0 )) return\n        if(calcAct.current.currentOperation === \"\") {\n            calcAct.current.currentNumberBefore = calcAct.current.currentNumberBefore.concat(getedItem);\n        } else {\n            calcAct.current.currentNumberAfter = calcAct.current.currentNumberAfter.concat(getedItem);\n        }\n        setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${getedItem}`))\n    }\n\n    const memory = () => {\n        const res = getResults(\n        calcAct.current.currentNumberBefore, \n        calcAct.current.currentNumberAfter, \n        calcAct.current.currentOperation) + Number(calcAct.current.prevMemo);\n        const strRes = res.toString();\n        calcAct.current.prevMemo = strRes;\n        calcAct.current.currentNumberBefore = \"\";\n        calcAct.current.currentNumberAfter = \"\";\n        calcAct.current.currentOperation = \"\";\n        setNumbersDisplay(() => \"\")\n    }\n\n    const memShowHandle = () => {\n        setResults(() => Number(calcAct.current.prevMemo));\n        calcAct.current.currentNumberBefore = calcAct.current.prevMemo;\n        calcAct.current.currentNumberAfter = \"\";\n        calcAct.current.currentOperation = \"\";\n        setNumbersDisplay(() => calcAct.current.currentNumberBefore)\n    }\n\n    const getResults = (prev, next, operation) => {\n\n        let isPointAppear = false;\n        \n        if(isExists(prev, next)) {\n            isPointAppear = !isPointAppear;\n        }   \n        let toFixedCheckPoint = isPointAppear ? 1 : 0;\n\n        switch(operation){\n           case \"+\":\n               if(!next.includes(\"%\")) {\n                   return (+prev + +next)\n               } else {\n                   return adding(prev, next, toFixedCheckPoint)\n               }\n           case \"*\":\n               if(!next.includes(\"%\")) {\n                   return (+prev * +next)\n               } else {\n                   return multiply(prev, next, toFixedCheckPoint)\n               }\n           case \"/\":\n               if(!next.includes(\"%\")) {\n                   return (+prev / +next)\n               } else {\n                   return devide(prev, next)\n               }\n           case \"-\":\n               if(!next.includes(\"%\")) {\n                   return (+prev - +next)\n               } else {\n                   return subtract(prev, next, toFixedCheckPoint)\n               }\n           default:\n               return operation\n        }\n    }  \n\n    const finalResult = () => {\n        const prev = calcAct.current.currentNumberBefore;\n        const next = calcAct.current.currentNumberAfter;\n\n        let isPointAppear = false;\n        if(isExists(prev, next)) {\n            isPointAppear = !isPointAppear;\n        }   \n        let toFixedCheckPoint = isPointAppear ? 1 : 0;\n        \n        switch(calcAct.current.currentOperation){\n           case \"+\":\n                if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n                   setResults(() => (+prev + +next).toFixed(toFixedCheckPoint))\n                } else {\n                   setResults(() => adding(prev, next, toFixedCheckPoint));\n                }\n                break\n           case \"*\":\n                if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n                   setResults(() => (+prev * +next).toFixed(toFixedCheckPoint))\n                } else {\n                   setResults(() => multiply(prev, next, toFixedCheckPoint))\n                }\n                break\n           case \"/\":\n                if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n                   setResults(() => (+prev / +next).toFixed(toFixedCheckPoint))\n                } else { \n                   setResults(() => devide(prev, next));\n                }\n                break\n           case \"-\":\n                if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n                   setResults(() => (+prev - +next).toFixed(toFixedCheckPoint))\n                } else {\n                   setResults(() => subtract(prev, next, toFixedCheckPoint));\n                }\n                break\n           default:\n               return calcAct.current.currentOperation\n        }\n        if(results !== null || results <= -1) {\n          const reverseResults = () => {\n            const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation)\n            const strRes = res.toString();\n            calcAct.current.currentNumberBefore = strRes;\n            calcAct.current.currentNumberAfter = \"\";\n            calcAct.current.currentOperation = \"\";\n            setResults(() => null)\n            setNumbersDisplay(() => strRes)\n          }\n          reverseResults()\n        }\n    }\n\n    const clear = () => {\n        setNumbersDisplay(() => \"\")\n        setResults(() => null)\n        refsToEmptyStr(calcAct);\n    }\n    return(\n        <Wrapper>\n            <AnswerBlock>\n                <GetNumbers data-testid=\"numbersDisplayed\">\n                    {numbersDisplay}\n                </GetNumbers>\n                <Answer>\n                    {results}\n                </Answer>\n            </AnswerBlock>\n            <FLexContainer>\n                    <RowBlock>\n                        <button style={{background: \"#d0cccc\"}} onClick={clear}>AC</button>\n                        <button onClick={memory}>\n                            ME\n                        </button>\n                        <button onClick={(e) => getItem(e)}>%</button>\n                        <button onClick={(e) => clickOperation(e)}>/</button>\n                    </RowBlock>\n                    <RowBlock>\n                        <button onClick={(e) => getItem(e)}>7</button>\n                        <button onClick={(e) => getItem(e)}>8</button>\n                        <button onClick={(e) => getItem(e)}>9</button>\n                        <button onClick={(e) => clickOperation(e)}>*</button>\n                    </RowBlock>\n                    <RowBlock>\n                        <button onClick={(e) => getItem(e)}>4</button>\n                        <button  onClick={(e) => getItem(e)}>5</button>\n                        <button onClick={(e) => getItem(e)}>6</button>\n                        <button onClick={(e) => clickOperation(e)}>-</button>\n                    </RowBlock>\n                    <RowBlock>\n                        <button onClick={(e) => getItem(e)}>1</button>\n                        <button onClick={(e) => getItem(e)}>2</button>\n                        <button onClick={(e) => getItem(e)}>3</button>\n                        <button onClick={(e) => clickOperation(e)}>+</button>\n                    </RowBlock>\n                    <RowBlock>\n                        <button onClick={(e) => getItem(e)}>.</button>\n                        <button onClick={(e) => getItem(e)}>0</button>\n                        <ExceptionH3 data-testid=\"results\" onClick={finalResult}>=</ExceptionH3>\n                        <button onClick={memShowHandle}>MRC</button>\n                    </RowBlock>\n                </FLexContainer>\n        </Wrapper>\n    );\n}\n\nexport default Calculator;","/Users/vladikbaryshpolets/Desktop/calculator/src/components/StyledCalculator.jsx",[],"/Users/vladikbaryshpolets/Desktop/calculator/src/components/util.jsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":25,"column":8,"nodeType":"37","endLine":25,"endColumn":10,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleKeyDown'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [handleKeyDown]",{"range":"44","text":"45"},[698,700],"[handleKeyDown]"]