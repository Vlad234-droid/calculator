{"ast":null,"code":"export const handleKeyDown = e => {\n  let key = e.key;\n\n  if (key === \"Enter\") {\n    finalResult();\n    return;\n  }\n\n  if (e.shiftKey && key === \"*\") {\n    key = \"*\";\n  }\n\n  if (e.shiftKey && key === \"%\") {\n    key = \"%\";\n  }\n\n  const reg = new RegExp(/^\\d+(\\.\\d+)?$/);\n\n  if (key.match(reg) !== null || key === \".\" || key === \"%\") {\n    setNumbersDisplay(numbersDisplay => `${numbersDisplay}${key}`);\n\n    if (calcAct.current.currentOperation === \"\") {\n      calcAct.current.currentNumberBefore = calcAct.current.currentNumberBefore.concat(key);\n    } else if (calcAct.current.currentOperation !== '') {\n      calcAct.current.currentNumberAfter = calcAct.current.currentNumberAfter.concat(key);\n    }\n  }\n\n  if (key === \"+\" || key === \"-\" || key === \"*\" || key === \"/\") {\n    if (calcAct.current.currentOperation === \"\") {\n      calcAct.current.currentOperation = key;\n      setNumbersDisplay(numbersDisplay => `${numbersDisplay}${key}`);\n    } else {\n      const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation);\n      const strRes = res.toString();\n      calcAct.current.currentNumberBefore = strRes;\n      calcAct.current.currentNumberAfter = \"\";\n      setNumbersDisplay(numbersDisplay => `${numbersDisplay}${key}`);\n      calcAct.current.currentOperation = key;\n    }\n  }\n};\nexport const clickOperation = e => {\n  setNumbersDisplay(prev => `${prev}${e.target.innerText}`);\n\n  if (calcAct.current.currentOperation === '') {\n    calcAct.current.currentOperation = e.target.innerText;\n  } else if (calcAct.current.currentOperation !== '') {\n    const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation);\n    const strRes = res.toString();\n    calcAct.current.currentNumberBefore = strRes;\n    calcAct.current.currentNumberAfter = \"\";\n    calcAct.current.currentOperation = e.target.innerText;\n  }\n};\nexport const getItem = e => {\n  let getedItem = e.target.innerText;\n  if (+getedItem === 0 && (numbersDisplay === \"\" || numbersDisplay === 0)) return;\n\n  if (calcAct.current.currentOperation === \"\") {\n    calcAct.current.currentNumberBefore = calcAct.current.currentNumberBefore.concat(getedItem);\n  } else {\n    calcAct.current.currentNumberAfter = calcAct.current.currentNumberAfter.concat(getedItem);\n  }\n\n  setNumbersDisplay(numbersDisplay => `${numbersDisplay}${getedItem}`);\n};\nexport const memory = () => {\n  const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation) + Number(calcAct.current.prevMemo);\n  const strRes = res.toString();\n  calcAct.current.prevMemo = strRes;\n  calcAct.current.currentNumberBefore = \"\";\n  calcAct.current.currentNumberAfter = \"\";\n  calcAct.current.currentOperation = \"\";\n  setNumbersDisplay(() => \"\");\n};\nexport const memShowHandle = () => {\n  setResults(() => Number(calcAct.current.prevMemo));\n  calcAct.current.currentNumberBefore = calcAct.current.prevMemo;\n  calcAct.current.currentNumberAfter = \"\";\n  calcAct.current.currentOperation = \"\";\n  setNumbersDisplay(() => calcAct.current.currentNumberBefore);\n};\nexport const getResults = (prev, next, operation) => {\n  let isPointAppear = false;\n\n  if (prev.toString().includes(\".\") || next.toString().includes('.') || prev.toString().includes(\"%\") || next.toString().includes(\"%\")) {\n    isPointAppear = !isPointAppear;\n  }\n\n  let toFixedCheckPoint = isPointAppear ? 1 : 0;\n\n  switch (operation) {\n    case \"+\":\n      if (!next.includes(\"%\")) {\n        return +prev + +next;\n      } else {\n        return (+prev + +prev / 100 * +next.slice(0, -1)).toFixed(toFixedCheckPoint);\n      }\n\n    case \"*\":\n      if (!next.includes(\"%\")) {\n        return +prev * +next;\n      } else {\n        return +prev / 100 * (+next.slice(0, -1)).toFixed(toFixedCheckPoint);\n      }\n\n    case \"/\":\n      if (!next.includes(\"%\")) {\n        return +prev / +next;\n      } else {\n        return Number(+prev / (+next.slice(0, -1) / 100)).toFixed(1);\n      }\n\n    case \"-\":\n      if (!next.includes(\"%\")) {\n        return +prev - +next;\n      } else {\n        return +prev - (+prev / 100 * +next.slice(0, -1)).toFixed(toFixedCheckPoint);\n      }\n\n    default:\n      return operation;\n  }\n};\nexport const finalResult = () => {\n  const prevNumber = calcAct.current.currentNumberBefore;\n  const nextNumber = calcAct.current.currentNumberAfter;\n  let isPointAppear = false;\n\n  if (prevNumber.toString().includes(\".\") || nextNumber.toString().includes('.') || prevNumber.toString().includes(\"%\") || nextNumber.toString().includes(\"%\")) {\n    isPointAppear = !isPointAppear;\n  }\n\n  let toFixedCheckPoint = isPointAppear ? 1 : 0;\n\n  switch (calcAct.current.currentOperation) {\n    case \"+\":\n      if (!calcAct.current.currentNumberAfter.includes(\"%\")) {\n        setResults(() => (+prevNumber + +nextNumber).toFixed(toFixedCheckPoint));\n      } else {\n        setResults(() => (+prevNumber + +prevNumber / 100 * +calcAct.current.currentNumberAfter.slice(0, -1)).toFixed(toFixedCheckPoint));\n      }\n\n      break;\n\n    case \"*\":\n      if (!calcAct.current.currentNumberAfter.includes(\"%\")) {\n        setResults(() => (+prevNumber * +nextNumber).toFixed(toFixedCheckPoint));\n      } else {\n        setResults(() => (+prevNumber / 100 * +calcAct.current.currentNumberAfter.slice(0, -1)).toFixed(toFixedCheckPoint));\n      }\n\n      break;\n\n    case \"/\":\n      if (!calcAct.current.currentNumberAfter.includes(\"%\")) {\n        setResults(() => (+prevNumber / +nextNumber).toFixed(toFixedCheckPoint));\n      } else {\n        setResults(() => Number(+prevNumber / (+calcAct.current.currentNumberAfter.slice(0, -1) / 100)).toFixed(1));\n      }\n\n      break;\n\n    case \"-\":\n      if (!calcAct.current.currentNumberAfter.includes(\"%\")) {\n        setResults(() => (+prevNumber - +nextNumber).toFixed(toFixedCheckPoint));\n      } else {\n        setResults(() => +prevNumber - (+prevNumber / 100 * +calcAct.current.currentNumberAfter.slice(0, -1)).toFixed(toFixedCheckPoint));\n      }\n\n      break;\n\n    default:\n      return calcAct.current.currentOperation;\n  }\n\n  if (results !== null || results <= -1) {\n    const reverseResults = () => {\n      const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation);\n      const strRes = res.toString();\n      calcAct.current.currentNumberBefore = strRes;\n      calcAct.current.currentNumberAfter = \"\";\n      calcAct.current.currentOperation = \"\";\n      setResults(() => null);\n      setNumbersDisplay(() => strRes);\n    };\n\n    reverseResults();\n  }\n};\nexport const clear = () => {\n  setNumbersDisplay(() => \"\");\n  setResults(() => null);\n  calcAct.current.currentOperation = \"\";\n  calcAct.current.currentNumberBefore = \"\";\n  calcAct.current.currentNumberAfter = \"\";\n  calcAct.current.prevMemo = \"\";\n};","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/calculator/src/components/util.jsx"],"names":["handleKeyDown","e","key","finalResult","shiftKey","reg","RegExp","match","setNumbersDisplay","numbersDisplay","calcAct","current","currentOperation","currentNumberBefore","concat","currentNumberAfter","res","getResults","strRes","toString","clickOperation","prev","target","innerText","getItem","getedItem","memory","Number","prevMemo","memShowHandle","setResults","next","operation","isPointAppear","includes","toFixedCheckPoint","slice","toFixed","prevNumber","nextNumber","results","reverseResults","clear"],"mappings":"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","sourcesContent":["export const handleKeyDown = (e) => {\n    let key = e.key;\n    if (key === \"Enter\") {\n        finalResult()\n        return\n    }\n    if(e.shiftKey && key === \"*\") {\n        key = \"*\"\n    }\n    if(e.shiftKey && key === \"%\") {\n        key = \"%\"\n    }\n    const reg = new RegExp(/^\\d+(\\.\\d+)?$/);\n    if(key.match(reg) !== null || key === \".\" || key === \"%\") {\n        setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${key}`))\n          if(calcAct.current.currentOperation === \"\") {\n              calcAct.current.currentNumberBefore = calcAct.current.currentNumberBefore.concat(key);\n          } else if (calcAct.current.currentOperation !== '') {\n              calcAct.current.currentNumberAfter = calcAct.current.currentNumberAfter.concat(key);\n        }\n    }\n\n    if(key === \"+\" || key === \"-\" || key === \"*\" || key === \"/\") {\n        if(calcAct.current.currentOperation === \"\") {\n            calcAct.current.currentOperation = key;\n            setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${key}`));\n        } else {\n            const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation)\n            const strRes = res.toString();\n            calcAct.current.currentNumberBefore = strRes;\n            calcAct.current.currentNumberAfter = \"\";\n            setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${key}`));\n            calcAct.current.currentOperation = key;\n        }\n    }\n};\n\nexport const clickOperation = (e) => {\n  setNumbersDisplay((prev) => `${prev}${e.target.innerText}`)\n    if(calcAct.current.currentOperation === '') {\n        calcAct.current.currentOperation = e.target.innerText;\n    } else if (calcAct.current.currentOperation !== '') {\n          const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation)\n          const strRes = res.toString();\n          calcAct.current.currentNumberBefore = strRes;\n          calcAct.current.currentNumberAfter = \"\";\n          calcAct.current.currentOperation = e.target.innerText;\n    }\n}\n\nexport const getItem = (e) => {\n    let getedItem = e.target.innerText\n    if( +getedItem === 0 && (numbersDisplay === \"\" || numbersDisplay === 0 )) return\n    if(calcAct.current.currentOperation === \"\") {\n        calcAct.current.currentNumberBefore = calcAct.current.currentNumberBefore.concat(getedItem);\n    } else {\n        calcAct.current.currentNumberAfter = calcAct.current.currentNumberAfter.concat(getedItem);\n    }\n    setNumbersDisplay((numbersDisplay) => (`${numbersDisplay}${getedItem}`))\n}\n\nexport const memory = () => {\n    const res = getResults(\n    calcAct.current.currentNumberBefore, \n    calcAct.current.currentNumberAfter, \n    calcAct.current.currentOperation) + Number(calcAct.current.prevMemo);\n    const strRes = res.toString();\n    calcAct.current.prevMemo = strRes;\n    calcAct.current.currentNumberBefore = \"\";\n    calcAct.current.currentNumberAfter = \"\";\n    calcAct.current.currentOperation = \"\";\n    setNumbersDisplay(() => \"\")\n}\n\nexport const memShowHandle = () => {\n    setResults(() => Number(calcAct.current.prevMemo));\n    calcAct.current.currentNumberBefore = calcAct.current.prevMemo;\n    calcAct.current.currentNumberAfter = \"\";\n    calcAct.current.currentOperation = \"\";\n    setNumbersDisplay(() => calcAct.current.currentNumberBefore)\n}\n\nexport const getResults = (prev, next, operation) => {\n    let isPointAppear = false;\n    \n    if(prev.toString().includes(\".\") \n    || next.toString().includes('.') \n    || prev.toString().includes(\"%\")\n    || next.toString().includes(\"%\")) {\n        isPointAppear = !isPointAppear;\n    }   \n    let toFixedCheckPoint = isPointAppear ? 1 : 0;\n    switch(operation){\n       case \"+\":\n           if(!next.includes(\"%\")) {\n               return (+prev + +next)\n           } else {\n               return (+prev + ((+prev / 100) * (+next.slice(0, -1)))).toFixed(toFixedCheckPoint)\n           }\n       case \"*\":\n           if(!next.includes(\"%\")) {\n               return (+prev * +next)\n           } else {\n               return (+prev / 100) * (+next.slice(0, -1)).toFixed(toFixedCheckPoint)\n           }\n            \n       case \"/\":\n           if(!next.includes(\"%\")) {\n               return (+prev / +next)\n           } else {\n               return Number((+prev) / (+next.slice(0, -1) / 100)).toFixed(1)\n           }\n       case \"-\":\n           if(!next.includes(\"%\")) {\n               return (+prev - +next)\n           } else {\n               return (+prev) - ((+prev / 100) * (+next.slice(0, -1))).toFixed(toFixedCheckPoint)\n           }\n       default:\n           return operation\n    }\n}  \n\nexport const finalResult = () => {\n    const prevNumber = calcAct.current.currentNumberBefore;\n    const nextNumber = calcAct.current.currentNumberAfter\n    let isPointAppear = false;\n    if(prevNumber.toString().includes(\".\") \n    || nextNumber.toString().includes('.') \n    || prevNumber.toString().includes(\"%\")\n    || nextNumber.toString().includes(\"%\")) {\n        isPointAppear = !isPointAppear;\n    }   \n    let toFixedCheckPoint = isPointAppear ? 1 : 0;\n    switch(calcAct.current.currentOperation){\n       case \"+\":\n            if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n               setResults(() => (+prevNumber + +nextNumber).toFixed(toFixedCheckPoint))\n            } else {\n               setResults(() => (+prevNumber + ((+prevNumber / 100) * (+calcAct.current.currentNumberAfter.slice(0, -1)))).toFixed(toFixedCheckPoint));\n            }\n            break\n       case \"*\":\n            if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n               setResults(() => (+prevNumber * +nextNumber).toFixed(toFixedCheckPoint))\n            } else {\n               setResults(() => ((+prevNumber / 100) * (+calcAct.current.currentNumberAfter.slice(0, -1))).toFixed(toFixedCheckPoint))\n            }\n            break\n       case \"/\":\n            if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n               setResults(() => (+prevNumber / +nextNumber).toFixed(toFixedCheckPoint))\n            } else { \n               setResults(() => Number((+prevNumber) / (+calcAct.current.currentNumberAfter.slice(0, -1) / 100)).toFixed(1));\n            }\n            break\n       case \"-\":\n            if(!calcAct.current.currentNumberAfter.includes(\"%\")) {\n               setResults(() => (+prevNumber - +nextNumber).toFixed(toFixedCheckPoint))\n            } else {\n               setResults(() => (+prevNumber) - ((+prevNumber / 100) * (+calcAct.current.currentNumberAfter.slice(0, -1))).toFixed(toFixedCheckPoint));\n            }\n            break\n       default:\n           return calcAct.current.currentOperation\n    }\n    if(results !== null || results <= -1) {\n      const reverseResults = () => {\n        const res = getResults(calcAct.current.currentNumberBefore, calcAct.current.currentNumberAfter, calcAct.current.currentOperation)\n        const strRes = res.toString();\n        calcAct.current.currentNumberBefore = strRes;\n        calcAct.current.currentNumberAfter = \"\";\n        calcAct.current.currentOperation = \"\";\n        setResults(() => null)\n        setNumbersDisplay(() => strRes)\n      }\n      reverseResults()\n    }\n}\n\nexport const clear = () => {\n    setNumbersDisplay(() => \"\")\n    setResults(() => null)\n    calcAct.current.currentOperation = \"\";\n    calcAct.current.currentNumberBefore = \"\";\n    calcAct.current.currentNumberAfter = \"\";\n    calcAct.current.prevMemo = \"\";\n}"]},"metadata":{},"sourceType":"module"}